from email import message
import time
import pandas as pd
import numpy as np
import re
import datetime
import csv
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import json
import seaborn as sns
import matplotlib.pyplot as plt
import psycopg2
import asyncio
import logging
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import openpyxl
import io
from dotenv import load_dotenv
import os

load_dotenv()


logging.basicConfig(level=logging.INFO)
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())

A = []
users_random_message = []
ADV = []
info_user_message = []
ADDmes = []

class Statess(StatesGroup):
    #–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    help_button = State()
    #–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    user_enter = State()
    category_enter = State()
    note_ctg_enter = State()
    zp_rs = State()
    size_s = State()
    card_cash = State()
    #–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Å–æ–≤–µ—Ç—ã
    advices = State()
    #–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    info_enter = State()
    #–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    red_set = State()
    red_enter = State()
    red_1 = State()
    red_2 = State()
    red_3 = State()
    red_4 = State()
    red_5 = State()
    #–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞
    xls_set = State() 

@dp.message_handler(commands="start") # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async def startmessage(message: types.Message):
    markupaa = types.InlineKeyboardMarkup(row_width=2)
    btn = types.InlineKeyboardButton("Help", callback_data="helpmsg")
    markupaa.add(btn)
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ 'Help'  ", reply_markup=markupaa)
    try:
        user = str(message.from_user.id)
        print(user)
        # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', # –Ω–æ—É—Ç–±—É–∫
        #                 password='KokoRari-23', host='localhost', port='5432')
        db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
                password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))
        cur = db.cursor()

        cur.execute(f'''CREATE TABLE "{user}" (
            id SERIAL NOT NULL PRIMARY KEY,
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è TEXT,
            –ü—Ä–∏–º–µ—á–∞–Ω–∏—è TEXT,
            –ó–ü_–†–° TEXT,
            –†–∞–∑–º–µ—Ä INTEGER DEFAULT 0,
            –ö–∞—Ä—Ç–∞_–ù–∞–ª TEXT,
            time date NOT NULL
            )''')
        
        db.commit()
        db.close()
    except psycopg2.errors.DuplicateTable:
        pass

        

@dp.callback_query_handler(text="helpmsg")
async def callback(call: types.CallbackQuery):
            markup_commands = types.InlineKeyboardMarkup(row_width=3)
            crt = types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="redact")
            add = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add")
            gdb = types.InlineKeyboardButton("–í—ã—Å–ª–∞—Ç—å", callback_data="db")
            inf = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
            anl = types.InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑", callback_data="analize")
            adv = types.InlineKeyboardButton("–°–æ–≤–µ—Ç—ã", callback_data="advice")
            markup_commands.add(crt, add, gdb, inf, anl, adv)
            
            await bot.send_message(call.message.chat.id, '''–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:
    üîß–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    üìù–î–æ–±–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
    üì§–í—ã—Å–ª–∞—Ç—å - –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ 
    üìñ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    üìä–ê–Ω–∞–ª–∏–∑ - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ–º—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä/–∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 
    üí°–°–æ–≤–µ—Ç—ã - —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤''', reply_markup=markup_commands)

@dp.callback_query_handler(text="redact")
async def redact_ex(message: types.Message):
    markup_redact = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    red_del = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    red_last = types.InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ')
    red_excel = types.InlineKeyboardButton('–í–Ω–µ—Å—Ç–∏ Excel')
    markup_redact.add(red_del, red_last, red_excel)
    await bot.send_message(message.from_user.id, '''‚úçÔ∏è*–í —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥:*
‚ùå–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
üìù–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–µ–ª–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É
üì©–í–Ω–µ—Å—Ç–∏ Excel - –≤—ã—Ç–µ–∫–∞—é—â–µ–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ "–í—ã—Å–ª–∞—Ç—å", –µ—Å–ª–∏ –≤—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–¥–∞—Ç–∏—Ä–æ–≤–∞–ª–∏ xlsx, xsl —Ñ–∞–π–ª—ã, –∏—Ö –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ''', parse_mode='Markdown', reply_markup=markup_redact)
    await Statess.red_set.set()

@dp.message_handler(state=Statess.red_set)
async def red_del_func(message: types.Message, state: FSMContext):
    # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', # –Ω–æ—É—Ç–±—É–∫
    #         password='KokoRari-23', host='localhost', port='5432')
    db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
            password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))
    cur = db.cursor()
    async with state.proxy() as delete_dt:
        user_red = str(message.from_user.id)
        print(user_red)
        if message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
            markup_del_red = types.InlineKeyboardMarkup(row_width=2)
            btn_del_red = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="helpmsg")
            markup_del_red.add(btn_del_red)
            cur.execute(f'''DELETE FROM "{user_red}"''')
            db.commit()
            db.close()
            await bot.send_message(message.from_user.id, '''–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã!''', reply_markup=markup_del_red)
            await state.finish()
        if message.text == '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ':
            markup_vvod = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
            btn_vvod = types.InlineKeyboardButton('–í–≤–æ–¥')
            markup_vvod.add(btn_vvod)
            await bot.send_message(message.from_user.id, '''–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è''', reply_markup=markup_vvod)
            await Statess.red_enter.set()
        if message.text == '–í–Ω–µ—Å—Ç–∏ Excel':
            await bot.send_message(message.from_user.id,'''–í–Ω–µ—Å–∏—Ç–µ Excel —Ñ–∞–π–ª:''')
            await Statess.xls_set.set()

@dp.message_handler(state=Statess.xls_set, content_types=['document'])
async def xls_import(message: types.Message, state: FSMContext):
            async with state.proxy() as xls_file:
                markup_del_xls = types.InlineKeyboardMarkup(row_width=2)
                btn_del_xls = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="helpmsg")
                markup_del_xls.add(btn_del_xls)
                # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', # –Ω–æ—É—Ç–±—É–∫
                #         password='KokoRari-23', host='localhost', port='5432')
                db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', #–ö–æ–º–ø
                        password='Ghg3500pol', host='localhost', port='5432')
                cur = db.cursor()
                user_xls = str(message.from_user.id)
                file_path = await bot.download_file_by_id(message.document.file_id)
                wb = openpyxl.load_workbook(filename=file_path)
                ws = wb.active
                rows_xls = ws.rows
                cur.execute(f'''SELECT * from "{user_xls}" ''')
                res_dt_postgre = cur.fetchall()
                print(res_dt_postgre)
                cur.execute(f'''DELETE FROM "{user_xls}" ''')
                for row_xls in rows_xls:
                    values_xls = [cell.value for cell in  row_xls]
                    print(values_xls[0], "–∞–≤—ã–∞")
                    cur.execute(f'''INSERT INTO "{user_xls}" (id, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –ó–ü_–†–°, –†–∞–∑–º–µ—Ä, –ö–∞—Ä—Ç–∞_–ù–∞–ª, time) VALUES(%s, %s, %s, %s, %s, %s, %s)''', (values_xls[0], values_xls[1], values_xls[2], values_xls[3], values_xls[4], values_xls[5], values_xls[6]))

                await bot.send_message(message.from_user.id, '''–î–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É!''', reply_markup=markup_del_xls)
                db.commit() 
                db.close()
                await state.finish()

@dp.message_handler(state=Statess.red_enter)
async def red_ctg(message: types.Message, state: FSMContext):
        async with state.proxy() as ctg:
            markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
            item = types.InlineKeyboardButton('–ó–∞—Ä–ø–ª–∞—Ç–∞')
            item_freetime = types.InlineKeyboardButton('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
            item_food = types.InlineKeyboardButton('–ü—Ä–æ–¥—É–∫—Ç—ã')
            item_fastfood = types.InlineKeyboardButton('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã')
            item_transport = types.InlineKeyboardButton('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
            item_hoz = types.InlineKeyboardButton('–•–æ–∑—Ç–æ–≤–∞—Ä—ã')
            item_sub = types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∫–∏')
            item_health = types.InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ')
            item_extrem = types.InlineKeyboardButton('–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã')
            markup.add(item, item_freetime, item_food, item_fastfood, item_transport, item_hoz, item_sub, item_health, item_extrem)
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=markup)
            ctg['category_enter'] = message.text
            users_random_message.append(message.text)

            # print(A)
            await Statess.next()

@dp.message_handler(state=Statess.red_1)    
async def red_notee(message: types.Message, state: FSMContext):
    async with state.proxy() as note:   
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
        note['note_ctg_enter'] = message.text
        A.append(message.text)
        print(A)
        await Statess.next()

@dp.message_handler(state=Statess.red_2)   
async def red_sal(message: types.Message, state: FSMContext):
    async with state.proxy() as z_s:
        markup_change = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item_change = types.InlineKeyboardButton('–î–æ—Ö–æ–¥')
        item_change2 = types.InlineKeyboardButton('–†–∞—Å—Ö–æ–¥')
        markup_change.add(item_change, item_change2)
        await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥(–î–æ—Ö–æ–¥ –∏–ª–∏ –†–∞—Å—Ö–æ–¥): ", reply_markup=markup_change)
        z_s['zp_rs'] = message.text
        A.append(message.text)
        print(A)
        await Statess.next()

@dp.message_handler(state=Statess.red_3) 
async def red_sizee(message: types.Message, state: FSMContext):
    async with state.proxy() as se:    
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥–∞: ")
        se['size_s'] = message.text
        A.append(message.text)
        print(A)
        await Statess.next()

@dp.message_handler(state=Statess.red_4)     
async def red_card_or_cash(message: types.Message, state: FSMContext):
    async with state.proxy() as cc:
        markup_ccn = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        item_card = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞')
        item_cash = types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
        item_qrcode = types.InlineKeyboardButton('Qr-code')
        item_NFC = types.InlineKeyboardButton('NFC')    
        markup_ccn.add(item_card, item_cash, item_NFC, item_qrcode)
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è/–æ–ø–ª–∞—Ç—ã: ", reply_markup=markup_ccn)
        cc['card_cash'] = message.text
        A.append(message.text)
        print(A)  
        await Statess.next() 

@dp.message_handler(state=Statess.red_5)    
async def red_update_db(message: types.Message, state: FSMContext):
    A.append(message.text)
    print(A)
    # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres',  #–ù–æ—É—Ç
    #                     password='KokoRari-23', host='localhost', port='5432')

    db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
            password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))

    cur = db.cursor()
    user_add = str(message.from_user.id)
    cur.execute(f'''SELECT * FROM "{user_add}" ORDER BY id DESC LIMIT 1''')
    last_dt = cur.fetchone()
    cur.execute(f'''UPDATE "{user_add}" SET –ö–∞—Ç–µ–≥–æ—Ä–∏—è = %s, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è = %s, –ó–ü_–†–° = %s, –†–∞–∑–º–µ—Ä = %s, –ö–∞—Ä—Ç–∞_–ù–∞–ª = %s WHERE id = %s''', [A[0], A[1], A[2], A[3], A[4], last_dt[0]])
    db.commit()
    db.close()
    A.clear()
    print(A)
    delete = types.ReplyKeyboardRemove()
    markupADD = types.InlineKeyboardMarkup(row_width=2)
    btn3  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
    markupADD.add(btn3)
    await bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=delete)
    await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ "Help"', reply_markup=markupADD)
    await state.finish()
        
@dp.callback_query_handler(text="add")
async def addexp_ctg(call: types.CallbackQuery):
    markup_help_users = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    item_help = types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
    item_enter = types.InlineKeyboardButton('–í–≤–æ–¥')
    item_back = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data="helpmsg")
    markup_help_users.add(item_help, item_enter, item_back)
    await bot.send_message(call.message.chat.id, '''–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ''', reply_markup=markup_help_users)
    await Statess.help_button.set()

@dp.message_handler(state=Statess.help_button)
async def help_function(message: types.Message, state: FSMContext):
    async with state.proxy() as instruction:
        if message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
            markup_help_users_2 = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            item_enter = types.InlineKeyboardButton('–í–≤–æ–¥')
            # otmena = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="helpmsg")
            markup_help_users_2.add(item_enter)
            await bot.send_message(message.from_user.id,'''
*–ö–û–†–†–ï–ö–¢–ù–û–ï –í–í–ï–î–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –ë–ê–ó–£*
üìö*–ö–∞—Ç–µ–≥–æ—Ä–∏—è* - –≤–≤–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞.
–ü—Ä–∏–º–µ—Ä—ã: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ø—Ä–µ–º–∏—è, –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ —Ç.–¥.
üìë*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è* - –≤–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
–ü—Ä–∏–º–µ—Ä—ã: —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –º–µ—Ç—Ä–æ, –ø—Ä–æ–µ–∫—Ç. 
*–í —Å–ª—É—á–∞–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ó–ü –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –î–û–•–û–î*
üìã*–ó–∞—Ä–ø–ª–∞—Ç–∞/–†–∞—Å—Ö–æ–¥—ã* - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(–õ–∏–±–æ –î–û–•–û–î, –õ–∏–±–æ –†–ê–°–•–û–î)
üíµ*–†–∞–∑–º–µ—Ä* - —Å—É–º–º–∞ –∑–∞—Ç—Ä–∞—Ç –∏–ª–∏ –¥–æ—Ö–æ–¥–∞
üí≥*–ö–∞—Ä—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ* - —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è/–æ–ø–ª–∞—Ç—ã(–¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –ö–∞—Ä—Ç–∞ –∏–ª–∏ –ù–∞–ª–∏—á–Ω—ã–µ, –Ω–æ –∏ NFC –∏ —Ç.–¥.)

*–í–ê–ñ–ù–û!!!*
–î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –ø–æ—à—Ç—É—á–Ω–æ. –¢–æ –µ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ —Å—Ä–∞–∑—É –≤—Å–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
*–ü–û–°–õ–ï –ü–†–û–ß–¢–ï–ù–ò–Ø –ò–ù–°–¢–†–£–ö–¶–ò–ò –í–í–ï–î–ò–¢–ï –õ–Æ–ë–û–ô –°–ò–ú–í–û–õ –ò–õ–ò –ù–ê–ñ–ú–ò–¢–ï –ù–ê –ö–ù–û–ü–ö–£ "–í–≤–æ–¥" –î–õ–Ø –ù–ê–ß–ê–õ–ê –†–ê–ë–û–¢–´*
        ''', parse_mode='Markdown', reply_markup=markup_help_users_2)
            await Statess.user_enter.set()
        if message.text == '–û—Ç–º–µ–Ω–∞':
            await state.finish()
            markup_back = types.InlineKeyboardMarkup(row_width=2)
            btnBK  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
            markup_back.add(btnBK)
            await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ "Help", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup_back)
        if message.text == '–í–≤–æ–¥': 
            await bot.send_message(message.from_user.id, '''–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è''')
            await Statess.user_enter.set()
        if message.text != '–û—Ç–º–µ–Ω–∞' and message.text != '–í–≤–æ–¥' and message.text != '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
            await bot.send_message(message.from_user.id, '''–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è''')
            await Statess.user_enter.set()
#         else:
            # markup_back_to_menu = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            # mbtm = types.InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data="helpmsg")
            # markup_back_to_menu.add(mbtm)
#             await bot.send_message(message.from_user.id, '''–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª
# –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ùå–û—Ç–º–µ–Ω–∞" ''', reply_markup=markup_back_to_menu)
#             await Statess.user_enter.set()


# dp.message_handler(content_types=types.ContentTypes.TEXT, state=Statess.help_button)
# async def next_add(message: types.Message):
#      if message.text == '–í–≤–æ–¥':
#             await Statess.next()
        
@dp.message_handler(state=Statess.user_enter)
async def addexp_ctg(message: types.Message, state: FSMContext):
        async with state.proxy() as ctg:
            markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
            item = types.InlineKeyboardButton('–ó–∞—Ä–ø–ª–∞—Ç–∞')
            item_freetime = types.InlineKeyboardButton('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
            item_food = types.InlineKeyboardButton('–ü—Ä–æ–¥—É–∫—Ç—ã')
            item_fastfood = types.InlineKeyboardButton('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã')
            item_transport = types.InlineKeyboardButton('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
            item_hoz = types.InlineKeyboardButton('–•–æ–∑—Ç–æ–≤–∞—Ä—ã')
            item_sub = types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∫–∏')
            item_health = types.InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ')
            item_extrem = types.InlineKeyboardButton('–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã')
            markup.add(item, item_freetime, item_food, item_fastfood, item_transport, item_hoz, item_sub, item_health, item_extrem)
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=markup)
            ctg['category_enter'] = message.text
            users_random_message.append(message.text)

            # print(A)
            await Statess.next()

@dp.message_handler(state=Statess.category_enter)    
async def addexp_notee(message: types.Message, state: FSMContext):
    async with state.proxy() as note:   
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
        note['note_ctg_enter'] = message.text
        A.append(message.text)
        print(A)
        await Statess.next()

@dp.message_handler(state=Statess.note_ctg_enter)   
async def addexp_sal(message: types.Message, state: FSMContext):
    async with state.proxy() as z_s:
        markup_change = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item_change = types.InlineKeyboardButton('–î–æ—Ö–æ–¥')
        item_change2 = types.InlineKeyboardButton('–†–∞—Å—Ö–æ–¥')
        markup_change.add(item_change, item_change2)
        await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥(–î–æ—Ö–æ–¥ –∏–ª–∏ –†–∞—Å—Ö–æ–¥): ", reply_markup=markup_change)
        z_s['zp_rs'] = message.text
        A.append(message.text)
        print(A)
        await Statess.next()

@dp.message_handler(state=Statess.zp_rs) 
async def addexp_sizee(message: types.Message, state: FSMContext):
    async with state.proxy() as se:    
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥–∞: ")
        se['size_s'] = message.text
        A.append(message.text)
        print(A)
        await Statess.next()

@dp.message_handler(state=Statess.size_s)     
async def addexp_card_or_cash(message: types.Message, state: FSMContext):
    async with state.proxy() as cc:
        markup_ccn = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        item_card = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞')
        item_cash = types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–µ')
        item_qrcode = types.InlineKeyboardButton('Qr-code')
        item_NFC = types.InlineKeyboardButton('NFC')    
        markup_ccn.add(item_card, item_cash, item_NFC, item_qrcode)
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è/–æ–ø–ª–∞—Ç—ã: ", reply_markup=markup_ccn)
        cc['card_cash'] = message.text
        A.append(message.text)
        print(A)  
        await Statess.next() 

@dp.message_handler(state=Statess.card_cash)    
async def save_db(message: types.Message, state: FSMContext):
    A.append(message.text)
    print(A)
    curData = datetime.date.today()
    # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres',  #–ù–æ—É—Ç
    #                     password='KokoRari-23', host='localhost', port='5432')

    db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
            password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))

    cur = db.cursor()
    user_add = str(message.from_user.id)
    cur.execute(f'''INSERT INTO "{user_add}" (–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –ó–ü_–†–°, –†–∞–∑–º–µ—Ä, –ö–∞—Ä—Ç–∞_–ù–∞–ª, time) VALUES(%s, %s, %s, %s, %s, %s)''', [A[0], A[1], A[2], A[3], A[4], curData])
    db.commit()
    db.close()
    A.clear()
    print(A)
    delete = types.ReplyKeyboardRemove()
    markupADD = types.InlineKeyboardMarkup(row_width=2)
    btn3  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
    markupADD.add(btn3)
    await bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=delete)
    await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ "Help"', reply_markup=markupADD)
    await state.finish()

@dp.callback_query_handler(text= "analize")
async def analize(message):
    try:
        # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', #–ù–æ—É—Ç
        #                     password='KokoRari-23', host='localhost', port='5432')

        db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
                password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))

        cur = db.cursor()
        user_analize = str(message.from_user.id)
        cur.execute(f'''SELECT * FROM "{user_analize}" ''')
        analize_res = cur.fetchall()
        print(analize_res)
        headers = [col[0] for col in cur.description] # get headers
        analize_res.insert(0, tuple(headers))
        fp = open('fin_tab.csv', 'w', encoding="utf-8", newline = '') 
        myFile = csv.writer(fp)
        myFile.writerows(analize_res)
        fp.close()

        data = pd.read_csv('fin_tab.csv')
        data_copy = data.copy()
        # print(data_copy)
        df = data_copy.drop('id', axis=1)
        df2 = df.loc[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] != "–ó–∞—Ä–ø–ª–∞—Ç–∞"]
        df_sum = df.loc[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–†–∞–∑–º–µ—Ä"].sum()
        df_sum_exp = df.loc[df["–ó–ü_–†–°"] == "–†–∞—Å—Ö–æ–¥", "–†–∞–∑–º–µ—Ä"].sum()
        copy = df2.copy()
        print(copy)
        print(df_sum)
        print(df_sum_exp)

        plt.subplots()
        sns.catplot(data=copy, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–†–∞–∑–º–µ—Ä", kind="bar", ci=None)
        plt.tick_params('x', rotation=90)
        
        plt.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        plt.tight_layout()
        plt.savefig('analize_data.png')

        await bot.send_photo(message.from_user.id, photo=open('analize_data.png', 'rb'))
        await bot.send_message(message.from_user.id,f'''–í—ã—à–µ –ø–æ–∫–∞–∑–∞–Ω –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.
    *–í–∞—à –¥–æ—Ö–æ–¥ - {df_sum}*
    *–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã - {df_sum_exp}*''', parse_mode='Markdown')
        

        cur.execute(f'''SELECT * FROM "{user_analize}" WHERE date_trunc('month', time) = date_trunc('month', current_timestamp) ''')
        analize_res_month = cur.fetchall()
        print(analize_res_month)
        headers_month = [col_month[0] for col_month in cur.description] # get headers
        analize_res_month.insert(0, tuple(headers_month))
        fpm = open('fin_tab_Month.csv', 'w', encoding="utf-8", newline = '') 
        myFileM = csv.writer(fpm)
        myFileM.writerows(analize_res_month)
        fpm.close()
        data_grM = pd.read_csv('fin_tab_Month.csv')
        data_grcM = data_grM.copy()
        # print(data_copy)
        df_grM = data_grcM.drop('id', axis=1)
        df_gr_2M = df_grM.loc[df_grM["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] != "–ó–∞—Ä–ø–ª–∞—Ç–∞"]
        df_gr_sum_M = df_grM.loc[df_grM["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–†–∞–∑–º–µ—Ä"].sum()
        df_gr_sum_exp_M = df_grM.loc[df_grM["–ó–ü_–†–°"] == "–†–∞—Å—Ö–æ–¥", "–†–∞–∑–º–µ—Ä"].sum()
        print(df_gr_sum_M)
        print(df_gr_sum_exp_M)
        copy_grM = df_gr_2M.copy()
        print(copy_grM)
        
        plt.subplots()
        sns.catplot(data=copy_grM, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–†–∞–∑–º–µ—Ä", kind="bar", ci=None)
        plt.tick_params('x', rotation=90)

        plt.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        plt.tight_layout()
        plt.savefig('analize_data_month.png')

        await bot.send_photo(message.from_user.id, photo=open('analize_data_month.png', 'rb'))
        await bot.send_message(message.from_user.id,f'''–ù–∞ –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–µ—Å—è—Ü.
    *–í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü- {df_gr_sum_M}*
    *–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü- {df_gr_sum_exp_M}*''', parse_mode='Markdown')
        
        cur.execute(f'''SELECT * FROM "{user_analize}" WHERE date_trunc('week', time) = date_trunc('week', current_timestamp) ''')
        analize_res_week = cur.fetchall()
        print(analize_res_week)
        headers_week = [col_week[0] for col_week in cur.description] # get headers
        analize_res_week.insert(0, tuple(headers_week))
        fpw = open('fin_tab_week.csv', 'w', encoding="utf-8", newline = '') 
        myFileW = csv.writer(fpw)
        myFileW.writerows(analize_res_week)
        fpw.close()
        data_gr_week = pd.read_csv('fin_tab_week.csv')
        data_grc_week = data_gr_week.copy()
        # print(data_copy)
        df_grW = data_grc_week.drop('id', axis=1)
        df_gr_2W = df_grW.loc[df_grW["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] != "–ó–∞—Ä–ø–ª–∞—Ç–∞"]
        df_gr_sum_W = df_grW.loc[df_grW["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–†–∞–∑–º–µ—Ä"].sum()
        df_gr_sum_exp_W = df_grW.loc[df_grW["–ó–ü_–†–°"] == "–†–∞—Å—Ö–æ–¥", "–†–∞–∑–º–µ—Ä"].sum()
        print(df_gr_sum_W)
        print(df_gr_sum_exp_W)
        copy_gr_week = df_gr_2W.copy()
        print(copy_gr_week)

        plt.subplots()
        sns.catplot(data=copy_gr_week, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–†–∞–∑–º–µ—Ä", kind="bar", ci=None)
        plt.tick_params('x', rotation=90)

        plt.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        plt.tight_layout()
        plt.savefig('analize_data_week.png')

        await bot.send_photo(message.from_user.id, photo=open('analize_data_week.png', 'rb'))
        await bot.send_message(message.from_user.id,f'''–ó–¥–µ—Å—å –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π(–ó–∞ –Ω–µ–¥–µ–ª—é). –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥—ã.
    *–í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é- {df_gr_sum_W}*
    *–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é- {df_gr_sum_exp_W}*''', parse_mode='Markdown')
        
        markup_analytics = types.InlineKeyboardMarkup(row_width=2)
        btnAn  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
        markup_analytics.add(btnAn)
        await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ "Help", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup_analytics)
    except ValueError:
        await bot.send_message(message.from_user.id, '''–î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö''')
        markup_analytics_2 = types.InlineKeyboardMarkup(row_width=2)
        btnAn_2  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
        markup_analytics_2.add(btnAn_2)
        await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ "Help", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup_analytics_2)
         
@dp.callback_query_handler(text= "advice")
async def advice_list(message):
    markup_advice = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    invest = types.InlineKeyboardButton('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
    jkh = types.InlineKeyboardButton('–î–æ–º')
    # prioritets = types.InlineKeyboardButton('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã')
    markup_advice.add(invest, jkh)
    await bot.send_message(message.from_user.id, '''
–°–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤:
–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –±–æ–ª—å—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
–î–æ–º - —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –≤ –¥–æ–º–µ
''', parse_mode='Markdown', reply_markup=markup_advice)
    await Statess.advices.set()

from commands import *
import random
@dp.message_handler(state=Statess.advices)  
async def change_adv(message: types.Message, state: FSMContext):
        ADV.append(message.text)
        print(ADV)
        if ADV[0] == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
            a = random.choice(investition)
            await bot.send_message(message.chat.id, f'{a}')
        if ADV[0] == "–î–æ–º":
            b = random.choice(zhkh)
            await bot.send_message(message.chat.id, f'{b}')
        
        markupADV = types.InlineKeyboardMarkup(row_width=2)
        btnAD  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
        markupADV.add(btnAD)
        ADV.clear()
        await state.finish()
        await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ "Help", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markupADV)

@dp.callback_query_handler(text="db") 
async def file_table(message):
    # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', #–ù–æ—É—Ç
    #                     password='KokoRari-23', host='localhost', port='5432')
    
    db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
            password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))

    cur = db.cursor()
    user_table = str(message.from_user.id)

    book = openpyxl.Workbook()
    sheet = book.active

    cur.execute(f'''SELECT * FROM "{user_table}" ''')
    results_db = cur.fetchall()
    print(results_db)
    i = 0
    for row_db in results_db:
        i += 1
        j = 1
        for col in row_db:
            cell = sheet.cell(row = i, column = j)
            cell.value = col
            j += 1
    
    # (D) SAVE EXCEL FILE & CLOSE DB
    book.save("–§–∏–Ω–∞–Ω—Å—ã.xlsx")
    db.close()
    await bot.send_message(message.from_user.id, '''–í–∞—à–∞ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:''')
    await bot.send_document(message.from_user.id, open(r'–§–∏–Ω–∞–Ω—Å—ã.xlsx', 'rb'))
    markupBASE = types.InlineKeyboardMarkup(row_width=2)
    btn4  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
    markupBASE.add(btn4)
    await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ "Help", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markupBASE)

@dp.callback_query_handler(text="info")
async def info(message):
    markup_info = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    btn_day = types.InlineKeyboardButton("–ó–∞ –¥–µ–Ω—å")
    btn_month = types.InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é")
    btn_year = types.InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü")
    btn_all = types.InlineKeyboardButton("–ó–∞ –≥–æ–¥")
    markup_info.add(btn_day, btn_month, btn_year, btn_all)
    await bot.send_message(message.from_user.id, '''
–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?
1 - –∑–∞ –¥–µ–Ω—å
2 - –∑–∞ –Ω–µ–¥–µ–ª—é
3 - –∑–∞ –º–µ—Å—è—Ü
4 - –∑–∞ –≥–æ–¥
''', parse_mode='Markdown', reply_markup=markup_info)
    await Statess.info_enter.set()

@dp.message_handler(state=Statess.info_enter)
async def info_day(message: types.Message, state: FSMContext):
    async with state.proxy() as inf:
        inf['info_user_message'] = message.text
        info_user_message.append(message.text)
        print(info_user_message)
        delete_day = types.ReplyKeyboardRemove() 
        # db =  psycopg2.connect(dbname='TelegramFinanseBot', user='postgres', 
        #                 password='KokoRari-23', host='localhost', port='5432')

        db =  psycopg2.connect(dbname=(os.getenv('DBNAME')), user=(os.getenv('USER')), #–ö–æ–º–ø
                password=(os.getenv('PASSWORD')), host=(os.getenv('HOST')), port=(os.getenv('PORT')))
        cur = db.cursor()
        user_view = str(message.from_user.id)
        date = datetime.date.today()
        print(date)
        if info_user_message[0] == "–ó–∞ –¥–µ–Ω—å":
            print(date)
            cur.execute(f'''SELECT –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –ó–ü_–†–°, –†–∞–∑–º–µ—Ä, –ö–∞—Ä—Ç–∞_–ù–∞–ª, TO_DATE(to_char(time, 'YYYY-MM-DD'), 'YYYY-MM-DD') as time FROM "{user_view}" WHERE time = to_timestamp('{date}', 'YYYY-MM-DD') ''')
            data_result = cur.fetchall()
            print(data_result)
            if data_result == []:
                await bot.send_message(message.from_user.id, '''–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤—ã –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö''')
            else:
                for row in data_result:
                    await bot.send_message(message.from_user.id, f'''<pre>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row[0]} 
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {row[1]} 
–ó–∞—Ä–ø–ª–∞—Ç–∞/—Ä–∞—Å—Ö–æ–¥: {row[2]} 
–†–∞–∑–º–µ—Ä: {row[3]} 
–ö–∞—Ä—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ: {row[4]} 
–í—Ä–µ–º—è: {row[5]}</pre>''', parse_mode="HTML")
                    
        if info_user_message[0] == "–ó–∞ –º–µ—Å—è—Ü":
            date_month = datetime.date.today()
            month = date_month.strftime("%Y-%m")
            print(month)
            cur.execute(f'''SELECT –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –ó–ü_–†–°, –†–∞–∑–º–µ—Ä, –ö–∞—Ä—Ç–∞_–ù–∞–ª, time FROM "{user_view}" WHERE date_trunc('month', time) = date_trunc('month', current_timestamp) ''')
            month_result = cur.fetchall()
            print(month_result)
            if month_result == []:
                await bot.send_message(message.from_user.id, '''–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤—ã –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö''')
            else:
                for row_month in month_result:
                        await bot.send_message(message.from_user.id, f'''<pre>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row_month[0]} 
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {row_month[1]} 
–ó–∞—Ä–ø–ª–∞—Ç–∞/—Ä–∞—Å—Ö–æ–¥: {row_month[2]} 
–†–∞–∑–º–µ—Ä: {row_month[3]} 
–ö–∞—Ä—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ: {row_month[4]} 
–í—Ä–µ–º—è: {row_month[5]}</pre>''', parse_mode="HTML")
                        
        if info_user_message[0] == "–ó–∞ –≥–æ–¥":
            date_year = datetime.date.today()
            year = date_year.strftime("%Y")
            print(year)
            cur.execute(f'''SELECT –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –ó–ü_–†–°, –†–∞–∑–º–µ—Ä, –ö–∞—Ä—Ç–∞_–ù–∞–ª, time FROM "{user_view}" WHERE date_trunc('year', time) = date_trunc('year', current_timestamp) ''')
            year_result = cur.fetchall()
            print(year_result)
            if year_result == []:
                await bot.send_message(message.from_user.id, '''–ó–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –≤—ã –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö''')
            else:
                for row_year in year_result:
                        await bot.send_message(message.from_user.id, f'''<pre>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row_year[0]} 
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {row_year[1]} 
–ó–∞—Ä–ø–ª–∞—Ç–∞/—Ä–∞—Å—Ö–æ–¥: {row_year[2]} 
–†–∞–∑–º–µ—Ä: {row_year[3]} 
–ö–∞—Ä—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ: {row_year[4]} 
–í—Ä–µ–º—è: {row_year[5]}</pre>''', parse_mode="HTML")

        if info_user_message[0] == "–ó–∞ –Ω–µ–¥–µ–ª—é":
            cur.execute(f'''SELECT –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –ó–ü_–†–°, –†–∞–∑–º–µ—Ä, –ö–∞—Ä—Ç–∞_–ù–∞–ª, time FROM "{user_view}" WHERE date_trunc('week', time) = date_trunc('week', current_timestamp) ''')
            res_all = cur.fetchall()
            print(res_all)
            if res_all == []:
                await bot.send_message(message.from_user.id, '''–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –µ—â–µ –Ω–µ –±—ã–ª–æ –≤–Ω–µ—Å–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö''')
            else:
                for row in res_all:
                        await bot.send_message(message.from_user.id, f'''<pre>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row[0]} 
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {row[1]} 
–ó–∞—Ä–ø–ª–∞—Ç–∞/—Ä–∞—Å—Ö–æ–¥: {row[2]} 
–†–∞–∑–º–µ—Ä: {row[3]} 
–ö–∞—Ä—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ: {row[4]} 
–í—Ä–µ–º—è: {row[5]}</pre>''', parse_mode="HTML")
                        
        info_user_message.clear()
        markupINFO = types.InlineKeyboardMarkup(row_width=2)
        btn4  = types.InlineKeyboardButton("Help", callback_data="helpmsg")
        markupINFO.add(btn4)
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ "Help"', reply_markup=markupINFO)
        db.commit()
        db.close() 
    await state.finish()  

@dp.message_handler(content_types=['text'])
async def get_text_messages(message):
    markup_start = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    start = types.InlineKeyboardButton("/start")
    markup_start.add(start)
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ - /start", reply_markup=markup_start)           
    else:
        await bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å - /start", reply_markup=markup_start)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
